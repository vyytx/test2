var gameW = window.innerWidth - (window.innerWidth % 8);
var gameH = window.innerHeight - (window.innerHeight % 6);

var game = new Phaser.Game(gameW, gameH, Phaser.AUTO, 'phaser-example', { preload: preload, create: create, update: update});

function preload() {

    game.load.crossOrigin = "anonymous";
    game.load.spritesheet('food','http://s.ntustcoding.club/snake/foods.png', 36, 36);
    game.load.image('ball','http://s.ntustcoding.club/snake/body.png');
    game.load.image('ground', 'http://s.ntustcoding.club/snake/ground.png');
    game.load.image('eball','http://s.ntustcoding.club/snake/ebody.png');
}

var snakeHead;
var snakesection = [];
var numSnakeSections = 5;
var snakeSpacer = 12;
var snakePath = [];
var oldPath = [];

var enemies = [];
var enemiesTotal = 20;

var foods = [];
var score = 0;
var scoreText;
var scoreBoostDesq;

var speed;
var boostDelay = 0;
var boostErrorText;
var space;
var c;

function create() {
  //背景
  game.add.tileSprite(0, 0, 4000, 4000, 'ground');
  //邊界
  game.world.setBounds(0, 0, 4000, 4000);

  //畫蛇頭
  snakeHead = game.add.sprite(400, 300, 'ball');
  snakeHead.anchor.setTo(0.5, 0.5);
  
  //畫蛇身
  for(var i = 1; i <= 5; i++){
    snakesection[i] = game.add.sprite(400, 300, 'ball');
    snakesection[i].anchor.setTo(0.5, 0.5);
  }
  
  //物理引擎
  game.physics.enable(snakeHead, Phaser.Physics.ARCADE);
  snakeHead.body.collideWorldBounds = true;
  
  //照相機
  game.camera.follow(snakeHead);
  
  //Path
  for (var i = 0; i <= numSnakeSections * snakeSpacer; i++){
      snakePath[i] = new Phaser.Point(400, 300);
      oldPath[i] = new Phaser.Point(400,300);
  }
  
  //foods
  foods = game.add.group(); 
  foods.enableBody = true;
  for (var i = 0; i < 500; i++) {
    createfood(i);
  }
  
  //score
  scoreText = game.add.text(30, 30, 'Score：' + score, {fontSize: '35px'});
  scoreBoostDesq = game.add.text(20, 90, 'If you let the snake accelerate, it will consume some points.', {fontSize: '15px'});
  
  //space
  space = game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
  c = game.input.keyboard.addKey(Phaser.Keyboard.C);
  
  for (var i = 0; i < enemiesTotal; i++){
    enemies.push(new EnemySnake());
    enemies[i].EnemyHead.index = i ;
  }
}

function update(){
  
  if(score % 30 === 0 && score !== 0)
  snakeGroth();
  
  move();
  game.physics.arcade.overlap(snakeHead, foods, eat);
  
  scoreText.text = 'Score：' + score;
  scoreText.x = game.camera.position.x + 30;
  scoreText.y = game.camera.position.y + 30;
  
  scoreBoostDesq.text = 'If you let the snake accelerate, it will consume some points.';
  scoreBoostDesq.x = game.camera.position.x + 30;
  scoreBoostDesq.y = game.camera.position.y + 90;
  
  for (var i = 0; i < enemiesTotal; i++){
    EnemyUpdate(enemies[i]);
  }
}


function move(){
  // 改變蛇頭方向
  snakeHead.rotation = game.physics.arcade.angleToPointer(snakeHead);
  
  if(game.input.activePointer.leftButton.isDown){
    speed = 400;
  }else{
    speed = 200;
  }
  
  //蛇頭前進
  if(speed >= 200){
    snakeHead.body.velocity = game.physics.arcade.velocityFromRotation(snakeHead.rotation, speed);
  }
  
  //蛇身前進
  oldPath.unshift(snakePath.pop());
  oldPath.pop();

  var part = new Phaser.Point(snakeHead.x, snakeHead.y);

  snakePath.unshift(part);
  
  
  for (var i = 1; i <= numSnakeSections; i++){
    snakesection[i].x = snakePath[i * (snakeSpacer / (400 / speed))].x;
    snakesection[i].y = snakePath[i * (snakeSpacer / (400 / speed))].y;
  }
}

function snakeGroth(){
  var path = oldPath[0];
  numSnakeSections += 1;
  
  snakesection[numSnakeSections] = game.add.sprite(path.x, path.y, 'ball');
  snakesection[numSnakeSections].anchor.setTo(0.5, 0.5);
  
  for(var i = 0; i < snakeSpacer; i++){
    snakePath.push(oldPath[i]);
  }
  
  score += 1;
}

function createfood(i) {
	foods.create(Math.random() * 4000, Math.random() * 4000, 'food', i%7);
}

function eat(snakeHead, food) {
	food.destroy(); 
	createfood();
  
  score++;
}

var EnemySnake = function() {
    var x = game.world.randomX;
    var y = game.world.randomY;
    this.StepCount = 0;
    this.numEnemySections = 5;
    this.EnemyPath = [];
    this.EnemyOldPath = [];
    this.EnemySpacer = 6;
    this.EnemySection = [];
    this.alive = true;
  
    this.EnemyHead = game.add.sprite(x, y, 'eball');
    this.EnemyHead.anchor.setTo(0.5, 0.5);
    this.EnemyHead.enableBody = true;
    this.EnemyHead.score = 0;
    game.physics.enable(this.EnemyHead, Phaser.Physics.ARCADE);
  
    this.EnemyHead.body.collideWorldBounds = true;

        //  Init snakeSection array
    for (var i = 1; i <= this.numEnemySections-1; i++)
    {
        this.EnemySection[i] = game.add.sprite(x, y, 'eball');
        this.EnemySection[i].enableBody = true;
        game.physics.enable(this.EnemySection[i], Phaser.Physics.ARCADE);
        this.EnemySection[i].anchor.setTo(0.5, 0.5);
    }
    
    //  Init snakePath array
    for (var i = 0; i <= this.numEnemySections * this.EnemySpacer; i++)
    {
        this.EnemyPath[i] = new Phaser.Point(x,y);
        this.EnemyOldPath[i] = new Phaser.Point(x,y);
    }  
}

function EnemyUpdate(snake){  
  if(snake.alive == true){
      game.physics.arcade.overlap(snake.EnemyHead, foods, eat);
      game.physics.arcade.overlap(snakeHead, snake.EnemySection, kill);
      for(var t = 0;t < numSnakeSections ; t++){
          game.physics.arcade.overlap(enemies[i].EnemyHead, snakesection, Enemykill);
      }
      
      //AI變長
      if(snake.EnemyHead.score%10===0 &&snake.EnemyHead.score !==0 ){
        EnemyGrow(snake);
      }else {
        
        //AI移動
        EnemyMove(snake);
        
        if(snake.StepCount >20+300*Math.random()){
          snake.EnemyHead.rotation = -3.14 + 6.28*Math.random();
          snake.StepCount = 0;
        }
        
        for(var  i= 0; i < enemies.length; i++){
          
          if(snake.EnemyHead !== enemies[i].EnemyHead){
            game.physics.arcade.overlap(enemies[i].EnemyHead , snake.EnemySection, Enemykill);
          }
          
          for(var t = 0;t < numSnakeSections ; t++){
            game.physics.arcade.overlap(enemies[i].EnemyHead, snakesection, Enemykill);
          }
          
        }     
      }
   }
}

function EnemyMove(enemy){
  
      enemy.EnemyHead.body.velocity = game.physics.arcade.velocityFromRotation(enemy.EnemyHead.rotation, 200);      
      enemy.EnemyOldPath.unshift(enemy.EnemyPath.pop());
      enemy.EnemyOldPath.pop();

      var part = new Phaser.Point(enemy.EnemyHead.x, enemy.EnemyHead.y);

      enemy.EnemyPath.unshift(part);

      for (var i = 1; i <= enemy.numEnemySections - 1; i++)
      {
        enemy.EnemySection[i].x = (enemy.EnemyPath[i * enemy.EnemySpacer]).x;
        enemy.EnemySection[i].y = (enemy.EnemyPath[i * enemy.EnemySpacer]).y;
      }
      enemy.StepCount +=1;
}

function EnemyGrow(enemy){
  
        var path = enemy.EnemyPath[enemy.numEnemySections*enemy.EnemySpacer];

        enemy.numEnemySections +=1;

        enemy.EnemySection[enemy.numEnemySections-1] = game.add.sprite(path.x, path.y, 'eball');
        enemy.EnemySection[enemy.numEnemySections-1].anchor.setTo(0.5, 0.5);
        enemy.EnemySection[enemy.numEnemySections-1].enableBody = true;
        game.physics.enable(enemy.EnemySection[enemy.numEnemySections-1], Phaser.Physics.ARCADE);
        
        for(var i=0;i<enemy.EnemySpacer;i++){

          enemy.EnemyPath.push(enemy.EnemyOldPath[i]);

        }
        enemy.EnemyHead.score+=1;
}

function kill(){
  for(var i = 1 ; i < numSnakeSections ; i++){
    snakesection[i].kill();
  }
  snakeHead.kill();
}

function Enemykill(Head){
  for(var j = 1 ; j < enemies[Head.index].numEnemySections ; j++){
    enemies[Head.index].EnemySection[j].kill();
  }
  Head.kill();
}
